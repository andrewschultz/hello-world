# rxc.py: regex chopper. This strips command from transcript and puts it into a regtest.py readable script.
#
# usage: rxc.py file

import glob
import re
import i7
import sys
import os

from collections import defaultdict

def proc_tran(my_file, launch=False):
    if not os.path.exists(my_file): sys.exit("No such file " + my_file)
    print("Processing", my_file)
    file_nox = re.sub("\.txt$", "", my_file, 0, re.IGNORECASE)
    cwd = os.getcwd()
    proj_name = re.sub("\.inform.*", "", cwd)
    proj_name = re.sub(".*[\\\/]", "", proj_name)
    out_file = "reg-{:s}-transcript-{:s}.txt".format(i7.revprojx(cwd), file_nox)
    fout = open(out_file, "w")
    fout.write("## {:s}.txt\n".format(file_nox))
    fout.write("##\n## generated by rxc.py\n##\n\n")
    fout.write("** game: /home/andrew/prt/debug-{:s}.ulx\n".format(proj_name))
    fout.write("** interpreter: /home/andrew/prt/glulxe -q\n\n* the-transcript")
    with open(my_file) as file:
        for line in file:
            if line.startswith(">"):
                if is_comment(line): continue
                if re.search("^> *[^a-z0-9]", line):
                    print("Unusual command start in line", line_count, line.strip())
                    l2 = re.sub("^> *", "", line)
                    unu[l2] += 1
                fout.write(line + "\n")
    fout.close()
    if len(unu.keys()) > 0:
        print("Unusual starts:", ', '.join(["{:s}: {:d}".format(x, unu[x]) for x in sorted(unu.keys())]))
    else:
        print("No unusual starts.")
    print(out_file, "created")
    if launch: os.system(out_file)

def is_comment(x):
    if re.search("> *[;\*]", x): return True
    return False

unu = defaultdict(int)

if len(sys.argv) == 1: sys.exit("You need to specify a file name.")

if "*" in sys.argv[1]:
    q = glob.glob(sys.argv[1])
    for q1 in q:
        proc_tran(q1)
else:
    proc_tran(sys.argv[1], True)

